@page "/Login"
@using PizzaBlazor.Client.Auth
@using PizzaBlazor.Shared.Models
@using System.Text.Json
@inject HttpClient client
@inject ILoginService loginService
@inject NavigationManager navManager

<div class="login-container">
    <img src="1683892785-granos-de-cafe.png" alt="Granitos de café" class="background-image" />

    <h3 class="login-title">Login</h3>

    <EditForm Model="userInfo" OnValidSubmit="LoginUsuario">
        <DataAnnotationsValidator />

        <div class="mb-3">
            <label class="form-label">Usuario:</label>
            <div>
                <InputText class="form-control" @bind-Value="userInfo.UserName" />
                <ValidationMessage For="@(() => userInfo.UserName)" />
            </div>
        </div>
        <div class="mb-3">
            <label class="form-label">Email:</label>
            <div>
                <InputText class="form-control" @bind-Value="userInfo.Email" />
                <ValidationMessage For="@(() => userInfo.Email)" />
            </div>
        </div>
        <div class="mb-3">
            <label class="form-label">Password:</label>
            <div>
                <InputText class="form-control" @bind-Value="userInfo.Password" />
                <ValidationMessage For="@(() => userInfo.Password)" />
            </div>
        </div>
        <button type="submit" class="btn btn-primary">Ingresar</button>
    </EditForm>

    <div class="mt-3">
        <p>¿No tienes una cuenta? <a href="/Registro">Registrar</a></p>
    </div>
    <div class="mt-4">
        <p>Cerrar Sesión <a href="/Logout">Salir</a></p>
    </div>
</div>

<style>
    .login-container {
        position: relative;
        width: 100%;
        height: 100vh;
        background: url('1683892785-granos-de-cafe.png') no-repeat center center fixed;
        background-size: cover;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        color: white;
        text-align: center;
    }

    .background-image {
        display: none; /* Ocultar la imagen cuando no sea necesaria */
    }

    .login-title {
        font-size: 2em;
        margin-bottom: 20px;
        text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.7);
    }

    .form-label {
        color: white;
    }

    .form-control {
        width: 100%;
        padding: 8px;
        margin-top: 4px;
        margin-bottom: 10px;
        box-sizing: border-box;
    }

    .btn-primary {
        width: 100%;
        padding: 10px;
    }

    .mt-3 {
        margin-top: 15px;
    }
</style>

@code {
    private UserInfo userInfo = new UserInfo();
    UserToken userToken = new UserToken();

    private async Task LoginUsuario()
    {
        try
        {
            var response = await client.PostAsJsonAsync("api/Cuentas/Login", userInfo);

            if (response.StatusCode == System.Net.HttpStatusCode.OK)
            {
                userToken = await response.Content.ReadFromJsonAsync<UserToken>();
                await loginService.Login(userToken.Token);

                // Redirigir a la página deseada después del inicio de sesión
                navManager.NavigateTo("/CrearOrden"); // Cambia esto a la ruta que desees
            }
            else
            {
                // Manejar el caso en el que la respuesta no sea 200 OK
                // Puedes mostrar un mensaje de error o realizar otras acciones
                Console.WriteLine($"Error en la respuesta: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            // Manejar cualquier excepción que pueda ocurrir durante la solicitud
            Console.WriteLine($"Error al realizar la solicitud: {ex.Message}");
        }
    }
}
